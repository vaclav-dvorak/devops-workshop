#Build pipeline references an undefined variable named ‘project’ and ‘dockerRepo’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972

trigger:
  - master

pr:
  - master

resources:
  - repo: self

variables:
  # Container registry service connection established during pipeline creation
  imageRepository: "$(dockerRepo)/$(project)"
  containerRegistry: "docker.hub"
  dockerfile: "$(Build.SourcesDirectory)/Dockerfile"
  tag: "latest"
  vmImage: "ubuntu-18.04"
  chartPath: "./.build/helm/charts/devops-workshop/"
stages:
  - stage: Test
    displayName: Test application
    condition: notIn(variables['Build.SourceBranch'], 'refs/heads/master')
    jobs:
      - job: Test
        displayName: Test
        pool:
          vmImage: $(vmImage)
        steps:
          - script: npm ci
            displayName: "Prepare node_modules"
          - script: npm run lint
            displayName: "Lint source code"
  - stage: Build
    displayName: Build application
    condition: in(variables['Build.SourceBranch'], 'refs/heads/master')
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImage)
        steps:
          - script: |
              set -e
              git rev-parse --short HEAD > ./version.txt
              if [ -f $(chartPath)/values.yaml ]; then
                sed -i -e "s/%GIT_REVISION%/`git rev-parse --short HEAD`/g" $(chartPath)/values.yaml
              fi
            displayName: "Put short-sha in Docker and Helm"
          - task: Docker@2
            displayName: Build and push an image to container registry
            inputs:
              containerRegistry: $(containerRegistry)
              command: buildAndPush
              repository: $(imageRepository)
              dockerfile: $(dockerfile)
              tags: "$(tag)"
              addPipelineData: false
          - task: PublishBuildArtifacts@1
            displayName: "Publish helm chart"
            inputs:
              PathtoPublish: "$(chartPath)"
              ArtifactName: "chart"
            condition: succeeded()
